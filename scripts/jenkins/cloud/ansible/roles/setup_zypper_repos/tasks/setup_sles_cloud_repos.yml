#
# (c) Copyright 2018 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
---

# If this task is included more than once as part of a single ansible-playbook
# top-level command, the subsequent runs will inherit the list created/updated
# by the earlier runs, which isn't always desirable.
- name: Initialise repos_to_manage as an empty list
  set_fact:
    repos_to_manage: []

- name: Gather repos to be managed
  set_fact:
    repos_to_manage: "{{ repos_to_manage + item.repo }}"
  when: "item.enabled | default(True)"
  loop:
    - repo: "{{ base_repos }}"
    - repo: "{{ cloud_update_repos }}"
      enabled: "{{ cloud_update_repos_enabled }}"
    - repo: "{{ sles_test_repos }}"
      enabled: "{{ sles_test_repos_enabled }}"
    - repo: "{{ cloud_test_repos }}"
      enabled: "{{ cloud_test_repos_enabled }}"
    - repo: "{{ sles_ltss_update_repos }}"
      enabled: "{{ sles_ltss_enabled[cloud_release] }}"
    - repo: "{{ sles_ltss_test_repos }}"
      enabled: "{{ sles_ltss_enabled[cloud_release] and sles_test_repos_enabled }}"

- name: Setup managed zypper hierarchy
  block:
    - name: Ensure repo directory exists
      file:
        state: directory
        path: "{{ local_repos_base_dir }}/{{ zypper_repo_name }}"
      loop: "{{ repos_to_manage }}"

    - name: Rsync repos that are frequently updated
      synchronize:
        mode: pull
        src: "rsync://{{ clouddata_server }}/cloud/repos/{{ ansible_architecture }}/{{ item }}/"
        dest: "{{ local_repos_base_dir }}/{{ zypper_repo_name }}"
        rsync_opts:
          - "--sparse"
          - "--hard-links"
          - "--fuzzy"
          - "--delete-delay"
      delegate_to: "{{ inventory_hostname }}"
      loop: "{{ repos_to_sync }}"
      register: sync_result
      retries: 5
      until: sync_result.rc != 24
      delay: 300
      when:

    - name: Add Pool tag to relevant rsync'd repos
      lineinfile:
        path: "{{ local_repos_base_dir }}/{{ zypper_repo_name }}/suse/repodata/repomd.xml"
        insertafter: "<tags>"
        line: "    <repo>obsproduct://build.suse.de/SUSE:{{ cloud_pool_tag }}</repo>"
      loop: "{{ repos_to_sync }}"
      when:
        - item.endswith('-devel') or item.endswith('-devel-staging')

    - name: Add Updates tag to relevant rsync'd repos
      lineinfile:
        path: "{{ local_repos_base_dir }}/{{ zypper_repo_name }}/suse/repodata/repomd.xml"
        insertafter: "<tags>"
        line: "    <repo>obsrepository://build.suse.de/SUSE:{{ cloud_updates_tag }}</repo>"
      loop: "{{ repos_to_sync }}"
      when:
        - item.endswith('-devel') or item.endswith('-devel-staging')

  when:
    - zypper_repo_state == "present"

- name: Remove zypper repo definitions
  zypper_repository:
    name: "{{ zypper_repo_name }}"
    state: "{{ zypper_repo_state }}"
  loop: "{{ repos_to_manage }}"
  when:
    # can only be absent if not enabled
    - zypper_repo_state == "absent"

- name: Delete zypper repo contents
  file:
    path: "{{ local_repos_base_dir }}/{{ zypper_repo_name }}"
    state: absent
  loop: "{{ repos_to_sync }}"
  when:
    # can only be true if state is absent and not enabled
    - zypper_repo_delete | bool

# This will remove the NFS mount only after the repo is no longer in use
# and delete is requested, or ensure it is mounted before attempting to
# add it below.
- name: Manage NFS mounting of repos that are not frequently updated
  mount:
    src: "{{ clouddata_server }}:/srv/nfs/repos/{{ ansible_architecture }}/{{ item }}"
    path: "{{ local_repos_base_dir }}/{{ item }}"
    opts: ro,nosuid,rsize=8192,wsize=8192,hard,intr,nolock,x-systemd.automount,noauto
    fstype: nfs
    state: "{{ (zypper_repo_state == 'absent' and (zypper_repo_delete | bool)) | ternary('absent', 'mounted') }}"
  loop: "{{ repos_to_mount }}"

# This will add a repo, possible in a disabled state, or disable an
# existing repo, if it already present.
- name: Manage zypper repos
  zypper_repository:
    name: "{{ zypper_repo_name }}"
    repo: "{{ local_repos_base_dir }}/{{ zypper_repo_name }}"
    enabled: "{{ zypper_repo_enabled }}"
    state: "{{ zypper_repo_state }}"
  loop: "{{ repos_to_manage }}"
  when:
    - zypper_repo_state == "present"
